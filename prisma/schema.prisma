// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String // In a real app, this would be a hash
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
}

enum Role {
  ADMIN
  USER
}

model Company {
  id                  String   @id @default(cuid())
  name                String
  address             String?
  vatNumber           String?
  invoicePrefix       String   @default("INV-")
  invoiceCounter      Int      @default(1)
  salesOrderPrefix    String   @default("SO-")
  salesOrderCounter   Int      @default(1)
  purchaseOrderPrefix String   @default("PO-")
  purchaseOrderCounter Int      @default(1)
  defaultWalletId     String?
  users               User[]
  counterparties      Counterparty[]
  products            Product[]
  wallets             Wallet[]
  purchaseOrders      PurchaseOrder[]
  salesOrders         SalesOrder[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Counterparty {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  type      CounterpartyType
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  purchases PurchaseOrder[]
  sales     SalesOrder[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CounterpartyType {
  CLIENT
  VENDOR
  BOTH
}

model Product {
  id                String              @id @default(cuid())
  name              String
  sku               String?
  description       String?
  purchasePrice     Float               @default(0)
  salePrice         Float
  stock             Int                 @default(0)
  company           Company             @relation(fields: [companyId], references: [id])
  companyId         String
  purchaseOrderItems PurchaseOrderItem[]
  salesOrderItems   SalesOrderItem[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Wallet {
  id             String        @id @default(cuid())
  name           String
  balance        Float         @default(0)
  company        Company       @relation(fields: [companyId], references: [id])
  companyId      String
  transactions   Transaction[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model PurchaseOrder {
  id                String              @id @default(cuid())
  orderNumber       String
  vendor            Counterparty        @relation(fields: [vendorId], references: [id])
  vendorId          String
  status            PurchaseOrderStatus @default(PENDING)
  items             PurchaseOrderItem[]
  total             Float
  company           Company             @relation(fields: [companyId], references: [id])
  companyId         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  relatedTransaction Transaction?
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  product         Product       @relation(fields: [productId], references: [id])
  productId       String
  quantity        Int
  price           Float
  total           Float
}

enum PurchaseOrderStatus {
  PENDING
  RECEIVED
  CANCELLED
}

model SalesOrder {
  id           String           @id @default(cuid())
  orderNumber  String
  client       Counterparty     @relation(fields: [clientId], references: [id])
  clientId     String
  status       SalesOrderStatus @default(PENDING)
  items        SalesOrderItem[]
  subtotal     Float
  tax          Float
  total        Float
  company      Company          @relation(fields: [companyId], references: [id])
  companyId    String
  transactions Transaction[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model SalesOrderItem {
  id           String     @id @default(cuid())
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id])
  salesOrderId String
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int
  price        Float
  total        Float
}

enum SalesOrderStatus {
  PENDING
  FULFILLED
  CANCELLED
}

model Transaction {
  id              String         @id @default(cuid())
  wallet          Wallet         @relation(fields: [walletId], references: [id])
  walletId        String
  type            TransactionType
  amount          Float // Positive for income, negative for expenses
  description     String
  salesOrder      SalesOrder?    @relation(fields: [salesOrderId], references: [id])
  salesOrderId    String?
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id], onUpdate: NoAction, onDelete: NoAction) @unique
  purchaseOrderId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}
