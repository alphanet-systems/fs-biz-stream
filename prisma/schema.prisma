// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String // In a real app, this should be a hash!
  role          String    @default("USER") // Changed from Role enum to String
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// BizStream specific models

model Counterparty {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  types     String // Comma-separated values like "CLIENT,VENDOR"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  salesOrders SalesOrder[]
  purchaseOrders PurchaseOrder[]
  payments Payment[]
}

model Product {
  id                 String               @id @default(cuid())
  name               String
  sku                String               @unique
  category           String?
  stock              Int
  price              Float
  imageUrl           String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  salesOrderItems    SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

model SalesOrder {
  id          String           @id @default(cuid())
  orderNumber String           @unique
  counterpartyId String
  counterparty Counterparty     @relation(fields: [counterpartyId], references: [id])
  orderDate   DateTime
  status      String // e.g., "Pending", "Fulfilled", "Cancelled"
  subtotal    Float
  tax         Float
  total       Float
  items       SalesOrderItem[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model SalesOrderItem {
  id          String     @id @default(cuid())
  orderId     String
  order       SalesOrder @relation(fields: [orderId], references: [id])
  productId   String
  product     Product    @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PurchaseOrder {
  id             String                @id @default(cuid())
  orderNumber    String                @unique
  counterpartyId    String
  counterparty      Counterparty          @relation(fields: [counterpartyId], references: [id])
  orderDate      DateTime
  status         String // e.g., "Pending", "Received", "Cancelled"
  subtotal       Float
  tax            Float
  total          Float
  items          PurchaseOrderItem[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}

model PurchaseOrderItem {
  id          String        @id @default(cuid())
  orderId     String
  order       PurchaseOrder @relation(fields: [orderId], references: [id])
  productId   String
  product     Product       @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Payment {
  id String @id @default(cuid())
  date DateTime
  counterpartyId String
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  description String?
  amount Float // Positive for income, negative for expenses
  type String // e.g., "Bank Transfer", "Cash", "Card"
  status String // e.g., "Received", "Sent"
  walletId String
  wallet Wallet @relation(fields: [walletId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
    id String @id @default(cuid())
    name String @unique
    balance Float
    payments Payment[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
