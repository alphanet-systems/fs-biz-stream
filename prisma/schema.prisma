// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Counterparty {
  id        String      @id @default(uuid())
  name      String
  email     String      @unique
  phone     String?
  address   String?
  types     CounterpartyType[]
  salesOrders SalesOrder[]
  purchaseOrders PurchaseOrder[]
  payments  Payment[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Product {
  id        String      @id @default(uuid())
  name      String
  sku       String      @unique
  category  String?
  stock     Int
  price     Float
  imageUrl  String?
  salesOrderItems SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model SalesOrder {
  id        String      @id @default(uuid())
  orderNumber String    @unique
  counterpartyId String
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  orderDate DateTime
  status    String // e.g., Pending, Fulfilled, Cancelled
  subtotal  Float
  tax       Float
  total     Float
  items     SalesOrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model SalesOrderItem {
  id          String      @id @default(uuid())
  salesOrderId String
  salesOrder  SalesOrder  @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product     @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  createdAt   DateTime    @default(now())
}

model PurchaseOrder {
  id            String      @id @default(uuid())
  orderNumber   String      @unique
  counterpartyId String
  counterparty  Counterparty @relation(fields: [counterpartyId], references: [id])
  orderDate     DateTime
  status        String // e.g., Pending, Received, Cancelled
  subtotal      Float
  tax           Float
  total         Float
  items         PurchaseOrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model PurchaseOrderItem {
  id              String      @id @default(uuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product     @relation(fields: [productId], references: [id])
  quantity        Int
  unitPrice       Float
  createdAt       DateTime    @default(now())
}

model Payment {
  id        String      @id @default(uuid())
  date      DateTime
  counterpartyId String
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  walletId  String
  wallet    Wallet      @relation(fields: [walletId], references: [id])
  description String?
  amount    Float // Positive for income, negative for expenses
  type      String // e.g., Bank Transfer, Cash, Card
  status    String // e.g., Received, Sent
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Wallet {
  id        String @id @default(uuid())
  name      String @unique
  balance   Float  @default(0)
  payments  Payment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CounterpartyType {
  CLIENT
  VENDOR
}
