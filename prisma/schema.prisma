// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER") // Changed from UserRole enum to String
  companyName   String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// BizStream specific models

model Counterparty {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  types     String // Changed from String[] to String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  salesOrders    SalesOrder[]
  purchaseOrders PurchaseOrder[]
  payments       Payment[]
  invoices       Invoice[]
}

model Product {
  id        String   @id @default(cuid())
  name      String
  sku       String   @unique
  category  String?
  stock     Int
  price     Float
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  salesOrderItems   SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

model SalesOrder {
  id        String   @id @default(cuid())
  orderNumber String @unique
  counterpartyId String
  orderDate DateTime
  status    String   // e.g., 'Pending', 'Fulfilled', 'Cancelled'
  subtotal  Float
  tax       Float
  total     Float
  generateInvoice Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  counterparty Counterparty     @relation(fields: [counterpartyId], references: [id])
  items        SalesOrderItem[]
  invoice      Invoice?
}

model SalesOrderItem {
  id           String     @id @default(cuid())
  salesOrderId String
  productId    String
  quantity     Int
  unitPrice    Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id])
}

model PurchaseOrder {
    id            String @id @default(cuid())
    orderNumber   String @unique
    counterpartyId String
    orderDate     DateTime
    status        String // e.g., 'Pending', 'Received', 'Cancelled'
    subtotal      Float
    tax           Float
    total         Float
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    counterparty      Counterparty          @relation(fields: [counterpartyId], references: [id])
    items             PurchaseOrderItem[]
}

model PurchaseOrderItem {
    id              String        @id @default(cuid())
    purchaseOrderId String
    productId       String
    quantity        Int
    unitPrice       Float
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
    product       Product       @relation(fields: [productId], references: [id])
}


model Payment {
  id             String      @id @default(cuid())
  date           DateTime
  counterpartyId String
  walletId       String
  description    String
  amount         Float       // Can be positive (income) or negative (expense)
  type           String      // e.g., 'Cash', 'Bank Transfer', 'Credit Card'
  status         String      // e.g., 'Received', 'Sent'
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  wallet       Wallet       @relation(fields: [walletId], references: [id])
}

model Wallet {
  id        String   @id @default(cuid())
  name      String   @unique
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments Payment[]
}

model Invoice {
  id             String     @id @default(cuid())
  invoiceNumber  String     @unique
  salesOrderId   String     @unique
  counterpartyId String
  issueDate      DateTime
  dueDate        DateTime
  status         String     // e.g., 'Draft', 'Sent', 'Paid', 'Overdue'
  total          Float
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  salesOrder   SalesOrder   @relation(fields: [salesOrderId], references: [id])
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
}
