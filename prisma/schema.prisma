
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER") // ADMIN or USER
  companyName   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// BizStream specific models

model Product {
  id        String    @id @default(cuid())
  name      String
  sku       String    @unique
  category  String?
  stock     Int
  price     Float
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  salesOrderItems   SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

model Counterparty {
  id        String    @id @default(cuid())
  name      String    @unique
  email     String    @unique
  phone     String?
  address   String?
  // Comma-separated values: "CLIENT", "VENDOR", or "CLIENT,VENDOR"
  types     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  salesOrders     SalesOrder[]
  purchaseOrders  PurchaseOrder[]
  payments        Payment[]
  invoices        Invoice[]
}

model SalesOrder {
  id              String    @id @default(cuid())
  orderNumber     String    @unique
  counterpartyId  String
  orderDate       DateTime
  status          String // Pending, Fulfilled, Cancelled
  subtotal        Float
  tax             Float
  total           Float
  generateInvoice Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  items        SalesOrderItem[]
  invoice      Invoice?
}

model SalesOrderItem {
  id           String  @id @default(cuid())
  salesOrderId String
  productId    String
  quantity     Int
  unitPrice    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id])
}

model PurchaseOrder {
  id             String   @id @default(cuid())
  orderNumber    String   @unique
  counterpartyId String
  orderDate      DateTime
  status         String // Pending, Received, Cancelled
  subtotal       Float
  tax            Float
  total          Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  items        PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String   @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitPrice       Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])
}

model Wallet {
  id        String    @id @default(cuid())
  name      String    @unique
  balance   Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  payments Payment[]
}

model Payment {
  id             String   @id @default(cuid())
  date           DateTime
  amount         Float // Positive for income, negative for expenses
  type           String // e.g., Bank Transfer, Cash, Sale, Purchase
  status         String // Received, Sent
  description    String?
  counterpartyId String
  walletId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  wallet       Wallet       @relation(fields: [walletId], references: [id])
}

model Invoice {
  id             String   @id @default(cuid())
  invoiceNumber  String   @unique
  salesOrderId   String   @unique
  counterpartyId String
  issueDate      DateTime
  dueDate        DateTime
  status         String // Draft, Sent, Paid, Overdue
  total          Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  salesOrder   SalesOrder   @relation(fields: [salesOrderId], references: [id])
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
}
