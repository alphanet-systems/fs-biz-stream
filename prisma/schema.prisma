
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User and Auth Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  companyName   String?
  role          String    @default("USER") // Changed from UserRole enum
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Business Logic Models

model Counterparty {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  phone          String?
  address        String?
  types          String          // Changed from String[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  salesOrders    SalesOrder[]
  purchaseOrders PurchaseOrder[]
  payments       Payment[]
  invoices       Invoice[]
}

model Product {
  id             String          @id @default(cuid())
  name           String
  sku            String          @unique
  category       String?
  stock          Int
  price          Float
  imageUrl       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  salesOrderItems SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

model SalesOrder {
  id              String           @id @default(cuid())
  orderNumber     String           @unique
  orderDate       DateTime
  status          String           // e.g., "Pending", "Fulfilled", "Cancelled"
  subtotal        Float
  tax             Float
  total           Float
  generateInvoice Boolean          @default(false)
  counterpartyId  String
  counterparty    Counterparty     @relation(fields: [counterpartyId], references: [id])
  items           SalesOrderItem[]
  invoice         Invoice?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model SalesOrderItem {
  id           String     @id @default(cuid())
  quantity     Int
  unitPrice    Float
  salesOrderId String
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id])
  productId    String
  product      Product    @relation(fields: [productId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model PurchaseOrder {
  id              String              @id @default(cuid())
  orderNumber     String              @unique
  orderDate       DateTime
  status          String              // e.g., "Pending", "Received", "Cancelled"
  subtotal        Float
  tax             Float
  total           Float
  counterpartyId  String
  counterparty    Counterparty        @relation(fields: [counterpartyId], references: [id])
  items           PurchaseOrderItem[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  quantity        Int
  unitPrice       Float
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Payment {
  id             String       @id @default(cuid())
  date           DateTime
  amount         Float        // Can be positive (income) or negative (expense)
  type           String       // e.g., "Bank Transfer", "Cash", "Credit Card"
  status         String       // e.g., "Received", "Sent", "Pending"
  description    String
  counterpartyId String
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  walletId       String
  wallet         Wallet       @relation(fields: [walletId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Wallet {
  id        String    @id @default(cuid())
  name      String    @unique
  balance   Float
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Invoice {
  id             String     @id @default(cuid())
  invoiceNumber  String     @unique
  issueDate      DateTime
  dueDate        DateTime
  status         String     // e.g., "Draft", "Sent", "Paid", "Overdue"
  total          Float
  salesOrderId   String     @unique
  salesOrder     SalesOrder @relation(fields: [salesOrderId], references: [id])
  counterpartyId String
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
