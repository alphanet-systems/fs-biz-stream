// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER") // Changed from Role enum to String
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Counterparty {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String?
  address   String?
  types     String // Storing as comma-separated string: e.g., "CLIENT,VENDOR"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payments  Payment[]
  salesOrders SalesOrder[]
  purchaseOrders PurchaseOrder[]
}

model Product {
  id        String    @id @default(cuid())
  name      String
  sku       String    @unique
  category  String?
  stock     Int
  price     Float
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  salesOrderItems SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

model SalesOrder {
  id        String    @id @default(cuid())
  orderNumber String  @unique
  counterpartyId String
  orderDate DateTime
  status    String
  subtotal  Float
  tax       Float
  total     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  items     SalesOrderItem[]
}

model SalesOrderItem {
  id          String   @id @default(cuid())
  salesOrderId String
  productId   String
  quantity    Int
  unitPrice   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  salesOrder  SalesOrder @relation(fields: [salesOrderId], references: [id])
  product     Product    @relation(fields: [productId], references: [id])
}

model PurchaseOrder {
  id             String    @id @default(cuid())
  orderNumber    String    @unique
  counterpartyId String
  orderDate      DateTime
  status         String
  subtotal       Float
  tax            Float
  total          Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  items          PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String   @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitPrice       Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])
}

model Payment {
  id        String    @id @default(cuid())
  date      DateTime
  amount    Float
  type      String
  status    String
  description String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  counterpartyId String
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  walletId  String
  wallet    Wallet @relation(fields: [walletId], references: [id])
}

model Wallet {
  id        String    @id @default(cuid())
  name      String
  balance   Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payments  Payment[]
}

    