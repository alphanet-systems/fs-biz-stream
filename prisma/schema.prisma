
generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id             String                @id @default(cuid())
  name           String
  sku            String                @unique
  category       String?
  stock          Int
  price          Float
  imageUrl       String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  salesOrderItems SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

model Counterparty {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  types     String // Comma-separated values like "CLIENT,VENDOR"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  salesOrders SalesOrder[]
  purchaseOrders PurchaseOrder[]
  payments  Payment[]
  invoices  Invoice[]
}

model SalesOrder {
  id             String        @id @default(cuid())
  orderNumber    String        @unique
  counterpartyId String
  counterparty   Counterparty  @relation(fields: [counterpartyId], references: [id])
  orderDate      DateTime
  status         String
  subtotal       Float
  tax            Float
  total          Float
  generateInvoice Boolean      @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  items          SalesOrderItem[]
  invoice        Invoice?
}

model SalesOrderItem {
  id           String      @id @default(cuid())
  salesOrderId String
  salesOrder   SalesOrder  @relation(fields: [salesOrderId], references: [id])
  productId    String
  product      Product     @relation(fields: [productId], references: [id])
  quantity     Int
  unitPrice    Float
}

model PurchaseOrder {
  id             String             @id @default(cuid())
  orderNumber    String             @unique
  counterpartyId String
  counterparty   Counterparty       @relation(fields: [counterpartyId], references: [id])
  orderDate      DateTime
  status         String
  subtotal       Float
  tax            Float
  total          Float
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  items          PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String         @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Product        @relation(fields: [productId], references: [id])
  quantity        Int
  unitPrice       Float
}

model Payment {
  id              String        @id @default(cuid())
  date            DateTime
  counterpartyId  String
  counterparty    Counterparty  @relation(fields: [counterpartyId], references: [id])
  walletId        String
  wallet          Wallet        @relation(fields: [walletId], references: [id])
  description     String?
  amount          Float
  type            String       // e.g., "Bank Transfer", "Cash"
  status          String       // e.g., "Received", "Sent"
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Wallet {
    id        String    @id @default(cuid())
    name      String    @unique
    balance   Float
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    payments  Payment[]
}


model Invoice {
  id             String       @id @default(cuid())
  invoiceNumber  String       @unique
  salesOrderId   String       @unique
  salesOrder     SalesOrder   @relation(fields: [salesOrderId], references: [id])
  counterpartyId String
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  issueDate      DateTime
  dueDate        DateTime
  status         String
  total          Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
