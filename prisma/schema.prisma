
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String  @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String  @default("USER") // ADMIN or USER
  companyName   String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// BizStream specific models

// Represents a client or a vendor
model Counterparty {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String   @unique
  phone     String?
  address   String?
  types     String // Comma-separated: "CLIENT", "VENDOR", "CLIENT,VENDOR"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  salesOrders   SalesOrder[]
  purchaseOrders PurchaseOrder[]
  payments       Payment[]
  invoices       Invoice[]
  events         CalendarEvent[]
}

model Product {
  id        String   @id @default(cuid())
  name      String
  sku       String   @unique
  category  String?
  stock     Int
  price     Float
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  salesOrderItems   SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

model SalesOrder {
  id              String    @id @default(cuid())
  orderNumber     String    @unique
  counterpartyId  String
  counterparty    Counterparty @relation(fields: [counterpartyId], references: [id])
  orderDate       DateTime
  status          String // Pending, Fulfilled, Cancelled
  subtotal        Float
  tax             Float
  total           Float
  generateInvoice Boolean   @default(false)
  items           SalesOrderItem[]
  invoice         Invoice?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SalesOrderItem {
  id            String     @id @default(cuid())
  salesOrderId  String
  salesOrder    SalesOrder @relation(fields: [salesOrderId], references: [id])
  productId     String
  product       Product    @relation(fields: [productId], references: [id])
  quantity      Int
  unitPrice     Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model PurchaseOrder {
  id             String    @id @default(cuid())
  orderNumber    String    @unique
  counterpartyId String
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  orderDate      DateTime
  status         String // Pending, Received, Cancelled
  subtotal       Float
  tax            Float
  total          Float
  items          PurchaseOrderItem[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  quantity        Int
  unitPrice       Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Invoice {
  id             String   @id @default(cuid())
  invoiceNumber  String   @unique
  salesOrderId   String   @unique
  salesOrder     SalesOrder @relation(fields: [salesOrderId], references: [id])
  counterpartyId String
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  issueDate      DateTime
  dueDate        DateTime
  status         String // Draft, Sent, Paid, Overdue
  total          Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Wallet {
  id        String   @id @default(cuid())
  name      String   @unique
  balance   Float
  payments  Payment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id              String      @id @default(cuid())
  date            DateTime
  amount          Float
  type            String // e.g., Bank Transfer, Cash, Card
  status          String // Received, Sent
  description     String
  counterpartyId  String
  counterparty    Counterparty @relation(fields: [counterpartyId], references: [id])
  walletId        String
  wallet          Wallet      @relation(fields: [walletId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model CalendarEvent {
  id             String      @id @default(cuid())
  title          String
  description    String?
  start          DateTime
  end            DateTime
  allDay         Boolean
  counterpartyId String?
  counterparty   Counterparty? @relation(fields: [counterpartyId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

    