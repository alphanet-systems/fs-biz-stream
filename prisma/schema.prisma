// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User and Auth models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER") // ADMIN or USER
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core business models
model Counterparty {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  types       String // Storing as comma-separated string: e.g., "CLIENT,VENDOR"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  salesOrders SalesOrder[]
  purchaseOrders PurchaseOrder[]
  payments    Payment[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  category    String?
  stock       Int
  price       Float
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  salesOrderItems SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

model SalesOrder {
  id           String    @id @default(cuid())
  orderNumber  String    @unique
  counterpartyId String
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  orderDate    DateTime
  status       String // e.g., Pending, Fulfilled, Cancelled
  subtotal     Float
  tax          Float
  total        Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  items        SalesOrderItem[]
}

model SalesOrderItem {
  id          String     @id @default(cuid())
  orderId     String
  order       SalesOrder @relation(fields: [orderId], references: [id])
  productId   String
  product     Product    @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PurchaseOrder {
  id           String    @id @default(cuid())
  orderNumber  String    @unique
  counterpartyId String
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  orderDate    DateTime
  status       String // e.g., Pending, Received, Cancelled
  subtotal     Float
  tax          Float
  total        Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  items        PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id          String         @id @default(cuid())
  orderId     String
  order       PurchaseOrder  @relation(fields: [orderId], references: [id])
  productId   String
  product     Product        @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Wallet {
    id        String    @id @default(cuid())
    name      String    @unique
    balance   Float
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    payments  Payment[]
}

model Payment {
    id             String      @id @default(cuid())
    date           DateTime
    counterpartyId  String
    counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
    walletId       String
    wallet         Wallet      @relation(fields: [walletId], references: [id])
    description    String
    amount         Float // Positive for income, negative for expenses
    type           String // e.g., Bank Transfer, Cash, Card
    status         String // e.g., Received, Sent, Pending
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
}
